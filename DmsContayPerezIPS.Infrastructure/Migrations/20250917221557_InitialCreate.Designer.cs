// <auto-generated />
using System;
using DmsContayPerezIPS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DmsContayPerezIPS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917221557_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CentralUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentVersion")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExtractedText")
                        .HasColumnType("text");

                    b.Property<long?>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("GestionUntil")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("text");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("TipoDocId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FolderId");

                    b.HasIndex("TipoDocId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.DocumentTag", b =>
                {
                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTags");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.DocumentVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UploadedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("UploaderId")
                        .HasColumnType("bigint");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UploaderId");

                    b.ToTable("DocumentVersions");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Folder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ParentId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.SerieDocumental", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Series");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Gestión Clínica"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Gestión Administrativa"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Gestión Financiera y Contable"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Gestión Jurídica"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Gestión de Calidad"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "SG-SST"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Administración de equipos biomédicos"
                        });
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.SubserieDocumental", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("DisposicionFinal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("RetencionCentral")
                        .HasColumnType("smallint");

                    b.Property<short>("RetencionGestion")
                        .HasColumnType("smallint");

                    b.Property<long>("SerieId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Subseries");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            Nombre = "Historias clínicas",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)15,
                            SerieId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            Nombre = "Incapacidades médicas",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)5,
                            SerieId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            Nombre = "Contratos laborales",
                            RetencionCentral = (short)10,
                            RetencionGestion = (short)10,
                            SerieId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            Nombre = "Correspondencia",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)2,
                            SerieId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            Nombre = "Estados financieros",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)20,
                            SerieId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            Nombre = "Facturas",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)5,
                            SerieId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            Nombre = "Procesos judiciales",
                            RetencionCentral = (short)20,
                            RetencionGestion = (short)10,
                            SerieId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "S",
                            Nombre = "Manuales de procesos",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)5,
                            SerieId = 5L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            Nombre = "Registros de calidad",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)3,
                            SerieId = 5L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            Nombre = "Accidentes laborales",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)20,
                            SerieId = 6L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            Nombre = "Capacitaciones SST",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)5,
                            SerieId = 6L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "M",
                            Nombre = "Hojas de vida de equipos",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SerieId = 7L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            Nombre = "Mantenimientos",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)5,
                            SerieId = 7L
                        });
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.TipoDocumental", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("DisposicionFinal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("RetencionCentral")
                        .HasColumnType("smallint");

                    b.Property<short>("RetencionGestion")
                        .HasColumnType("smallint");

                    b.Property<long>("SubserieId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubserieId");

                    b.ToTable("TiposDocumentales");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Historia de ingreso",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Notas de evolución",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Resultados de laboratorio",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Certificado de incapacidad",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Soporte médico",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Contrato firmado",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Acta de terminación",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Carta enviada",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Carta recibida",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 4L
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Balance general",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 5L
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Estado de resultados",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 5L
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Factura de proveedor",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 6L
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Factura de cliente",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 6L
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Demanda",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 7L
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Sentencia",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 7L
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "S",
                            IsActive = true,
                            Nombre = "Manual de calidad",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 8L
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Registro de auditoría interna",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 9L
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "CT",
                            IsActive = true,
                            Nombre = "Reporte de accidente",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 10L
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Lista de asistencia",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 11L
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "M",
                            IsActive = true,
                            Nombre = "Ficha técnica del equipo",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 12L
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Reporte de mantenimiento preventivo",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 13L
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisposicionFinal = "E",
                            IsActive = true,
                            Nombre = "Reporte de mantenimiento correctivo",
                            RetencionCentral = (short)0,
                            RetencionGestion = (short)0,
                            SubserieId = 13L
                        });
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Document", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.User", "Creator")
                        .WithMany("Documents")
                        .HasForeignKey("CreatorId");

                    b.HasOne("DmsContayPerezIPS.Domain.Entities.Folder", "Folder")
                        .WithMany("Documents")
                        .HasForeignKey("FolderId");

                    b.HasOne("DmsContayPerezIPS.Domain.Entities.TipoDocumental", "TipoDocumental")
                        .WithMany("Documents")
                        .HasForeignKey("TipoDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Folder");

                    b.Navigation("TipoDocumental");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.DocumentTag", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.Document", "Document")
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsContayPerezIPS.Domain.Entities.Tag", "Tag")
                        .WithMany("DocumentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.DocumentVersion", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.Document", "Document")
                        .WithMany("Versions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmsContayPerezIPS.Domain.Entities.User", "Uploader")
                        .WithMany("DocumentVersions")
                        .HasForeignKey("UploaderId");

                    b.Navigation("Document");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Folder", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.User", "Creator")
                        .WithMany("Folders")
                        .HasForeignKey("CreatorId");

                    b.HasOne("DmsContayPerezIPS.Domain.Entities.Folder", "Parent")
                        .WithMany("Subfolders")
                        .HasForeignKey("ParentId");

                    b.Navigation("Creator");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.SubserieDocumental", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.SerieDocumental", "Serie")
                        .WithMany("Subseries")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.TipoDocumental", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.SubserieDocumental", "Subserie")
                        .WithMany("TiposDocumentales")
                        .HasForeignKey("SubserieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subserie");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.User", b =>
                {
                    b.HasOne("DmsContayPerezIPS.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Document", b =>
                {
                    b.Navigation("DocumentTags");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Folder", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Subfolders");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.SerieDocumental", b =>
                {
                    b.Navigation("Subseries");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.SubserieDocumental", b =>
                {
                    b.Navigation("TiposDocumentales");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.Tag", b =>
                {
                    b.Navigation("DocumentTags");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.TipoDocumental", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("DmsContayPerezIPS.Domain.Entities.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("DocumentVersions");

                    b.Navigation("Documents");

                    b.Navigation("Folders");
                });
#pragma warning restore 612, 618
        }
    }
}
